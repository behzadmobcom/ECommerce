@page "/product/{productUrl}"
@model ArshaHamrah.Pages.ProductModel
@{
    ViewData["Title"] = "توضیحات کالا";
	int priceId = Model.Product.Prices.FirstOrDefault().Id;
}


<style>
	
	*{
		user-select:none;
	}
	.wrapper{
		overflow:hidden;
	}


	.image-zoom-available{
		cursor: zoom-in;
	}
	.image-zoom-available.is-active{
		cursor: none;
	}
</style>
<!-- BREADCRUMBS SETCTION START -->
<div class="breadcrumbs-section plr-200 mb-80">
    <div class="breadcrumbs overlay-bg">
        <div class="container">
            <div class="row">
                <div class="col-xs-12">
                    <div class="breadcrumbs-inner">
                        <h1 class="breadcrumbs-title">توضیحات کالا</h1>
                        <ul class="breadcrumb-list">
                            <li>
                                <a asp-page="index">خانه</a>
                            </li>
                            <li>توضیحات کالا</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- BREADCRUMBS SETCTION END -->
<!-- Start page content -->
<section id="page-content" class="page-wrapper">

    <!-- SHOP SECTION START -->
<div class="shop-section mb-80">
<div class="wrapper">
	<img style="width: 80%" class="image-zoom-available" src="https://picsum.photos/2500/1300/?random" draggable=false>
</div>
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12">
<!-- single-product-area start -->
<div class="single-product-area mb-80">
<div class="row">
<div class="wrapper">
	<img style="width: 80%" class="image-zoom-available" src="https://picsum.photos/2500/1300/?random" draggable=false>
</div>
<!-- imgs-zoom-area start -->
<div class="col-md-5 col-sm-5 col-xs-12">
	<div class="imgs-zoom-area">

		@if (Model.Product.Images.Any())
		{

			<img id="zoom_03" class="image-zoom-available" draggable=false
			     src="/@($"{Model.Product.Images.FirstOrDefault().Path}/{Model.Product.Images.FirstOrDefault().Name}")"
			     alt="@Model.Product.Images.FirstOrDefault().Alt">


		}
		else
		{
			<img id="zoom_03" src="~/img/product/NoImage.png" alt="NoImage">
		}
		<div class="row">
			<div class="col-xs-12">
				<div id="gallery_01" class="carousel-btn slick-arrow-3 mt-30">
					@foreach (var image in Model.Product.Images)
					{
						<div class="p-c">
							<a href="#" data-image="/@($"{image.Path}/{image.Name}")" data-zoom-image="/@($"{image.Path}/{image.Name}")">
								<img class="zoom_03" src="/@($"{image.Path}/{image.Name}")" alt="@image.Alt">
							</a>
						</div>
					}
				</div>
			</div>
		</div>
	</div>
	<div class="details-add-group" style="margin-right: 15%">

                                    <a class="button large mt-20" href="javascript:void(0)" onclick="AddCart(@Model.Product.Id,$('#PriceId').val(),$('#qtybutton').val())" title="اضافه کردن به سبد خرید">
                                        <span>افزودن به سبد خرید</span>
                                    </a>
                                </div>
                            </div>
                            <!-- imgs-zoom-area end -->
                            <!-- single-product-info start -->
                            <div class="col-md-7 col-sm-7 col-xs-12">
                                <div class="single-product-info">
                                    <h3 class="text-black-1">@Model.Product.Name </h3>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <h6 class="brand-name-2">@Model.Product.Brand?.Name</h6>
                                        </div>
                                        <div class="col-md-6">
                                            <h6 class="brand-name-2">@Model.Product.Prices.FirstOrDefault(x => !x.IsColleague).Amount تومان</h6>
                                        </div>
                                    </div>

		<!-- hr -->
		<hr>
		<!-- single-product-tab -->
		<div class="single-product-tab">
			<ul class="reviews-tab mb-20">
				<li class="active">
					<a href="#description" data-toggle="tab">توضیحات</a>
				</li>
				@*	<li>
                                            <a href="#information" data-toggle="tab">اطلاعات</a>
                                            </li>*@
				<li>
					<a href="#reviews" data-toggle="tab">بررسی محصول</a>
				</li>
			</ul>
			<div class="tab-content">
				<div role="tabpanel" class="tab-pane active" id="description">
					<p>@Html.Raw(Model.Product.Description)</p>
				</div>
				@*	<div role="tabpanel" class="tab-pane" id="information">
                                            <p>deff</p>
                                            </div>*@
				<div role="tabpanel" class="tab-pane" id="reviews">
					<!-- reviews-tab-desc -->
					<div class="reviews-tab-desc">
						<!-- single comments -->
						<div class="media mt-30">
							<div class="media-left">
								<a href="#">
									<img class="media-object" src="~/img/author/No_Pic.jpg" alt="#">
								</a>
							</div>
							<div class="media-body">
								<div class="clearfix">
									<div class="name-commenter pull-left">
										<h6 class="media-heading">
											<a href="#">ادمین</a>
										</h6>
										@*	<p class="mb-10">27 شهریور 1398 در 14:30</p>*@
									</div>
								</div>
								<p class="mb-0">
									@Html.Raw(Model.Product.Review)
								</p>
							</div>
						</div>

					</div>
				</div>
			</div>
		</div>
		<!--  hr -->
		<hr>
		<!-- single-pro-color-rating -->
		<div class="single-pro-color-rating clearfix">
			@*   <div class="sin-pro-color f-left">
                                            @foreach (var price in Model.Product.Prices)
                                            {
                                                var select = price.Id == priceId ? "checked" : "";
                                                if ((int)price.Grade > 1)
                                                {
                                                    <div style="background-color: @price.Color.ColorCode">
                                                        <input @select name="price.Id" type="radio" id="price-@price.Id" onclick="SetPriceId(@price.Id)" />
                                                        <label for="price-@price.Id">درجه کیفیت : @price.Grade - </label>
                                                        <label for="price-@price.Id">قیمت : @price.Amount</label>
                                                    </div>
                                                }
                                                else if (price.ColorId > 1)
                                                {
                                                    <div style="background-color: @price.Color.ColorCode">
                                                        <input @select name="price.Id" type="radio" id="price-@price.Id" onclick="SetPriceId(@price.Id)" />
                                                        <label for="price-@price.Id">@price.Color.Name - </label>
                                                        <label for="price-@price.Id">قیمت : @price.Amount</label>
                                                    </div>
                                                }
                                                <br>
                                            }
                                        </div>*@
			<div class="sin-pro-color f-left">
				@foreach (var price in Model.Product.Prices)
				{
					var select = price.Id == priceId ? "checked" : "";
					if ((int)price.Grade > 1)
					{
						<div class="widget-color f-left">
							<ul>
								<li >
									<a style="background: @price.Color.ColorCode; width: 30px; height: 30px;border: 1px solid black"> </a>
									<input @select name="price.Id" type="radio" id="price-@price.Id" onclick="SetPriceId(@price.Id)"/>
									<label for="price-@price.Id">@price.Color.Name - </label>
									<label for="price-@price.Id">قیمت : @price.Amount</label>

								</li>
							</ul>
						</div>
					}
					else if (price.ColorId > 1)
					{
						<div class="widget-color f-left">
							<ul>
								<li >
									<a style="background: @price.Color.ColorCode; width: 30px; height: 30px;border: 1px solid black"> </a>
									<input @select name="price.Id" type="radio" id="price-@price.Id" onclick="SetPriceId(@price.Id)"/>
									<label for="price-@price.Id">@price.Color.Name - </label>
									<label for="price-@price.Id">قیمت : @price.Amount</label>

								</li>
							</ul>
						</div>
					}
					<br>
				}
				<input id="PriceId" hidden="hidden" value="@priceId"/>
			</div>
			<div class="pro-rating sin-pro-rating f-right">
				<a href="#" tabindex="0">
					<i class="zmdi zmdi-star"></i>
				</a>
				<a href="#" tabindex="0">
					<i class="zmdi zmdi-star"></i>
				</a>
				<a href="#" tabindex="0">
					<i class="zmdi zmdi-star"></i>
				</a>
				<a href="#" tabindex="0">
					<i class="zmdi zmdi-star-half"></i>
				</a>
				<a href="#" tabindex="0">
					<i class="zmdi zmdi-star-outline"></i>
				</a>
				<span class="text-black-5">( 27 امتیاز )</span>
			</div>
		</div>
		<!-- hr -->
		<hr>
		<!-- plus-minus-pro-action -->
		<div class="plus-minus-pro-action" style="margin-bottom:15%">
			<div class="sin-plus-minus f-left clearfix">
				<p class="color-title f-left">تعداد</p>
				<div class="cart-plus-minus f-left">
					<input type="text" value="1" id="qtybutton" name="qtybutton" class="cart-plus-minus-box">
				</div>
			</div>
			<div class="sin-pro-action f-right">
				<ul class="action-button">
					<li>
						<a href="javascript:void(0)" onclick="AddWishList(@Model.Product.Id)" title="لیست علاقمندی ها">
							<i class="zmdi zmdi-favorite"></i>
						</a>
					</li>
					<li>
						<a href="javascript:void(0)" onclick="OpenProductModal(@Model.Product.Id)" data-toggle="modal" data-target="#productModal" title="نمایش سریع">
							<i class="zmdi zmdi-zoom-in"></i>
						</a>
					</li>
					<li>
						<a href="javascript:void(0)" onclick="AddCompareList(@Model.Product.Id)" title="مقایسه">
							<i class="zmdi zmdi-refresh"></i>
						</a>

                                                </li>
                                                <li>
                                                    <a href="javascript:void(0)" onclick="AddCart(@Model.Product.Id,$('#PriceId').val(),$('#qtybutton').val())" title="اضافه کردن به سبد خرید">
                                                        <i class="zmdi zmdi-shopping-cart-plus"></i>
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- single-product-info end -->
                            <br />
                            <br />
                            <table class="table table-bordered">

	                            <tbody style="color: black">
	                            <tr>
		                            <th style="font-size: 20px;text-align: center" colspan="2">مشخصات</th>
	                            </tr>
	@for (var g = 0; g < Model.AttributeGroups.Count; g++)
	{
		@for (var i = 0; i < Model.AttributeGroups[g].Attribute.Count; i++)
		{
			@if (string.IsNullOrWhiteSpace(Model.AttributeGroups[g].Attribute[i].AttributeValue[0].Value)) continue;
			<tr>
				<th style="width: 20%">@Model.AttributeGroups[g].Attribute[i].Title</th>

				<td> @Model.AttributeGroups[g].Attribute[i].AttributeValue[0].Value</td>
			</tr>
		}
	}
		</tbody>
                            </table>
</div>
</div>
<!-- single-product-area end -->
<div class="related-product-area">
	<div class="row">
		<div class="col-md-12">
			<div class="section-title text-left mb-40">
				<h2>محصولات مرتبط</h2>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="active-related-product">
			@foreach (var relatedProduct in Model.RelatedProduct)
			{
				<partial name="Components/_productCard" model="relatedProduct"/>
			}


		</div>
	</div>
</div>
</div>
</div>
</div>
</div>
    <!-- SHOP SECTION END -->
</section>
<!-- End page content -->

@section Scripts
{
	<script src="~/js/main.js"></script>
	<script src="~/js/plugins.js"></script>

	<script>
		var prices = @Html.Raw(Json.Serialize(Model.Product.Prices));
		function SetPriceId(id) {
	
			var price = prices.find(x => x.id == id);
		
			if (price.exist > 0) {
				$("#exist").text("در دسترس");

			} else {
				$("#exist").text("عدم موجودی");
			}
			$("#price").text(price.amount + " تومان ");
			$("#PriceId").val(id);
		}
	</script>
}
<script>

let settings = {
  'magnification':3,
  'maskSize': 100
}

// Once our images have loaded let's create the zoom
window.addEventListener("load",()=>{
  // find all the images
  let images = document.querySelectorAll('.image-zoom-available');
  // querySelectorAll produces an array of images that we pull out one by one and create a Zoombini for
  Array.prototype.forEach.call(images,(image)=>{
    new Zoombini(image);
  });
});

// A Zoombini (or whatever you want to call it), is a class that takes an image input and adds the zoomable functionality to it. Let's take a look inside at what it does.
class Zoombini {
  // When we create a new Zoombini we run this function; it's called the constructor and you can see it taking our image in from above
  constructor(targetImage){
    // We don't want the Zoombini to forget about it's image, so let's save that info
    this.image = targetImage;
    // The Zoombini isActive after it has opened up
    this.isActive = false;
    // But as it hasn't been used yet it's maskSize will be 0
    this.maskSize = 0;
    // And we have to start it's coordinates somewhere, they may as well be (0,0)
    this.mousex = this.mousey = 0;

    // Now we're set up let's build the necessary compoonents
    // First let's clone our original image, I'm going to call it imageZoom and save it our Zoombini
    this.imageZoom = this.image.cloneNode();
    // And pop it next to the image target
    this.image.parentNode.insertBefore(this.imageZoom,this.image);
    // Make the zoom image that we'll crop float above it's original sibling
    this.imageZoom.style.zIndex = 1;
    // We don't want to be able to touch it though, we want to reach whats underneat
    this.imageZoom.style.pointerEvents = "none";
    // And so we can translate it let's make it absolute
    this.imageZoom.style.position = "absolute";

    // Now let's scale up our enlarged image and add an event listener so that it resizes whenever the size of the window changes
    this.resizeImageZoom();
    window.addEventListener("resize", this.resizeImageZoom.bind(this), false);

    // Now that we're finishing the constructor we need to addeventlisteners so we can interact with it
    // This function is just below, but still exists within our Zoombini
    this.UI();
    // Finally we'll apply an initial mask at default settings to hide this image
    this.drawMask();
  }

  // resizeImageZoom resizes the enlarged image
  resizeImageZoom(){
    // So let's scale up this version
    this.imageZoom.style.width = this.image.getBoundingClientRect().width*settings.magnification+'px';
  }

  // This could be inside the constructor but it's nicer on it's own I think
  UI(){
    this.image.addEventListener('mousemove',(event)=>{
      // When we move our mouse the x and y coordinates from the event
      // We subtract the left and top coordinates so that we get the (x,y) coordinates of the actualy image, where (0,0) would be the top left
      this.mousex = event.clientX - this.image.getBoundingClientRect().left;
      this.mousey = event.clientY - this.image.getBoundingClientRect().top;

      // if we're not active then don't display anything
      if (!this.isActive) return;
      // The drawMask() function below displays our the portion of the image that we're interested in
      this.drawMask();
    });

    // When they mousedown we open up our mask
    this.image.addEventListener('mousedown',()=>{
      // But it can be opening or closing, so let's pass in that information
      this.isExpanding = true;
      // To do that we start the maskSizer function, which calls itself until it reaches full size
      this.maskSizer();
      // And hide our cursor (we know where it is)
      this.image.classList.add('is-active');
    });
    // if the mouse is released, close the mask
    this.image.addEventListener('mouseup',()=>{
      // if it's not expanding, it's closing
      this.isExpanding = false;
      // if the mask has already expanded we'll need to start another maskSizer to shrink it. We don't run the maskSizer unless the mask is changing
      if (this.isActive) this.maskSizer();
    });
    // same as above, caused by us moving out of the zoom area
    this.image.addEventListener('mouseout',()=>{
      this.isExpanding = false;
      if (this.isActive) this.maskSizer();
    });
  }

  // The drawmask function shows us the piece of the image that we are hovering over
  drawMask(){
    // Let's use getBoundingClientRect to get the location of our images
    let image = this.image.getBoundingClientRect();
    let imageZoom = this.imageZoom.getBoundingClientRect();
    // We'll start by getting the (x,y) of our big image that matches the piece we're mousing over (which we stored from our event listener as this.mousex and this.mousey). This is a clunky bit of code to help the zooms work in a variety of situations.
    let prop_x = this.mousex/image.width*imageZoom.width*(1-1/settings.magnification)-image.x-window.scrollX;
    let prop_y = this.mousey/image.height*imageZoom.height*(1-1/settings.magnification)-image.y-window.scrollY;
    // Shift the large image by that amount
    this.imageZoom.style.left = -prop_x+"px";
    this.imageZoom.style.top = -prop_y+"px";

    // Now we need to create our mask
    // First let's get the coordinates of the point we're hovering over
    let x=this.mousex*settings.magnification;
    let y=this.mousey*settings.magnification;
    // And create and apply our clip
    let clippy = "circle("+this.maskSize+"px at "+x+"px "+y+"px)";
    this.imageZoom.style.clipPath = clippy;
    this.imageZoom.style.webkitClipPath = clippy;
  }

  // We'll use the maskSizer to either expand or shrink the size of our mask
  maskSizer(){
    // We're in maskSizer so we're changing the size of our mask. Let's make the mask radius larger if the Zoombini is expanding, or shrink it if it's closing. The numbers below might need to be adjusted. It closes faster than it opens
    this.maskSize = this.isExpanding ? this.maskSize+35 : this.maskSize-40;
    // It has the form of: condition ? value-if-true : value-if-false
    // Think of the ? as "then" and : as "else"

    // if we've reaached max size, don't make it any larger
    if (this.maskSize >= settings.maskSize) {
      this.maskSize = settings.maskSize;
      // we'll no longer need to change the maskSize so we'll just set this.isActive to true and let our mousemove do the drawing
      this.isActive = true;
    } else if (this.maskSize<0){
      // Our mask is closed
      this.maskSize = 0;
      this.isActive = false;
      this.image.classList.remove('is-active');
    } else {
      // Or else we haven't reached a size that we want to keep yet. So let's loop it on the next available frame
      // We bind(this) here because so that the function remains in context
      requestAnimationFrame(this.maskSizer.bind(this));
    }
    // After we have the appropriate size, draw the mask
    this.drawMask();
  }
}
</script>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-46156385-1', 'cssscript.com');
  ga('send', 'pageview');

</script>

